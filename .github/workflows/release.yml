name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  publish-platform-artifacts:
    name: Publishing for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        rust: [ stable ]
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_prefix: macos
            cross: false
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_prefix: linux
            cross: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_prefix: windows
            cross: false
            # TODO fix openssl issue
#          - target: x86_64-unknown-linux-musl
#            os: ubuntu-latest
#            artifact_prefix: linux-musl
#            cross: false
#          - target: armv7-unknown-linux-gnueabihf
#            os: ubuntu-latest
#            artifact_prefix: armv7
#            cross: true

    steps:
      - name: Sync Rustup toolchain
        run: rustup show

      - name: Installing needed Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq pkg-config libssl-dev

      - name: Checking out sources
        uses: actions/checkout@v3

      - name: Running cargo build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Packaging final binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          BINARY_NAME=mlbt.exe
          strip $BINARY_NAME
          RELEASE_NAME=mlbt-${{ matrix.artifact_prefix }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME
          certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Packaging final binary (macOS and Linux)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          BINARY_NAME=mlbt
          strip $BINARY_NAME
          RELEASE_NAME=mlbt-${{ matrix.artifact_prefix }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME
          shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/mlbt-${{ matrix.artifact_prefix }}.tar.gz
            target/${{ matrix.target }}/release/mlbt-${{ matrix.artifact_prefix }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docker-image:
    runs-on: ubuntu-latest
    permissions:
     contents: read
     packages: write
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get tag
        run: |
          git fetch --tags --force
          echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Build and Push Image
        run: |
          docker build . --tag ghcr.io/mlb-rs/mlbt:$TAG
          docker push ghcr.io/mlb-rs/mlbt:$TAG
